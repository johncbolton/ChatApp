name: Drift Correction

on:
  workflow_dispatch:

jobs:
  drift-correction-dev:
    name: Drift Correction Dev
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./infrastructure/dev
        shell: bash -e {0} # Ensures scripts exit on error

    permissions:
      id-token: write
      contents: read
      pull-requests: read

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: "arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/${{ vars.AWS_IAM_ROLE_NAME }}"
          aws-region: ${{ vars.AWS_REGION }}

      - name: Setup Terraform
        id: setup
        uses: hashicorp/setup-terraform@v3.1.0
        with:
          terraform_version: "1.9.2" # Or "latest"
          terraform_wrapper: false

      - name: Verify Terraform Version
        run: |
          set -x # Print executed commands
          echo "Verifying Terraform version and path:"
          which ${{ steps.setup.outputs.terraform-path }}
          ${{ steps.setup.outputs.terraform-path }} version
          echo "Verifying default terraform path:"
          which terraform || echo "Default terraform not found"
          terraform version || echo "Default terraform version check failed"

      - name: Terraform Init
        id: init
        run: |
          set -x
          ${{ steps.setup.outputs.terraform-path }} init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET_DEV }}" \
            -backend-config="dynamodb_table=${{ secrets.TF_LOCK_TABLE_DEV }}"

      - name: Terraform Plan
        id: plan
        run: |
          set -x
          ${{ steps.setup.outputs.terraform-path }} plan -var="project_name=${{ vars.PROJECT_NAME }}" -no-color

      - name: Install jq
        run: |
          set -x
          sudo apt-get update && sudo apt-get install -y jq

      - name: Terraform Import Login
        id: import-login
        run: |
          set -x
          echo "--- Import Login Step ---"
          echo "Getting REST_API_ID..."
          REST_API_ID=$(${{ steps.setup.outputs.terraform-path }} state show -json 'module.api.aws_api_gateway_rest_api.api' | jq -r .values.id)
          echo "REST_API_ID is: [${REST_API_ID}]"

          if [ -z "$REST_API_ID" ]; then
            echo "::error::REST_API_ID is empty. Cannot proceed."
            exit 1
          fi

          echo "Getting LOGIN_RESOURCE_ID..."
          LOGIN_RESOURCE_ID=$(aws apigateway get-resources --rest-api-id $REST_API_ID --query "items[?path=='/login'].id" --output text)
          echo "LOGIN_RESOURCE_ID is: [${LOGIN_RESOURCE_ID}]"
          
          if [ -z "$LOGIN_RESOURCE_ID" ]; then
            echo "::error::LOGIN_RESOURCE_ID is empty. Cannot proceed."
            exit 1
          fi

          echo "Running terraform import..."
          ${{ steps.setup.outputs.terraform-path }} import module.api.aws_api_gateway_resource.login $REST_API_ID/$LOGIN_RESOURCE_ID

      - name: Terraform Import Get Upload URL
        id: import-get-upload-url
        run: |
          set -x
          echo "--- Import Get Upload URL Step ---"
          echo "Getting REST_API_ID..."
          REST_API_ID=$(${{ steps.setup.outputs.terraform-path }} state show -json 'module.api.aws_api_gateway_rest_api.api' | jq -r .values.id)
          echo "REST_API_ID is: [${REST_API_ID}]"

          if [ -z "$REST_API_ID" ]; then
            echo "::error::REST_API_ID is empty. Cannot proceed."
            exit 1
          fi

          echo "Getting GET_UPLOAD_URL_RESOURCE_ID..."
          GET_UPLOAD_URL_RESOURCE_ID=$(aws apigateway get-resources --rest-api-id $REST_API_ID --query "items[?path=='/get-upload-url'].id" --output text)
          echo "GET_UPLOAD_URL_RESOURCE_ID is: [${GET_UPLOAD_URL_RESOURCE_ID}]"
          
          if [ -z "$GET_UPLOAD_URL_RESOURCE_ID" ]; then
            echo "::error::GET_UPLOAD_URL_RESOURCE_ID is empty. Cannot proceed."
            exit 1
          fi

          echo "Running terraform import..."
          ${{ steps.setup.outputs.terraform-path }} import module.api.aws_api_gateway_resource.get_upload_url $REST_API_ID/$GET_UPLOAD_URL_RESOURCE_ID

      - name: Terraform Apply
        id: apply
        run: |
          set -x
          ${{ steps.setup.outputs.terraform-path }} apply -auto-approve

